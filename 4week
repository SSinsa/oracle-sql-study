Chapter 4. SQL문 분석과 공유풀
# SQL문과 일반적인 프로그래밍 언어의 차이
- 일반적인 프로그래밍 언어와  SQL은 '처리방법(절차)'을 기술하지 않는다는 점이 차이점!
- 옵티마이저(파서)가 SQL문을 분석하고 '실행계획'이라고 하는 처리 방법을 생성해주기 때문

# 서버 프로세스와 분석
- 오라클에서의 분석이란,  SQL문을 분석하고 어떤 요소로 구성되어 있는지를 조사하는 것뿐만 아니라 어떤 식으로 처리할지까지 생각하는 것을가리킴
- 규칙 기반, 비용기반
- 오라클 10g 부터 규칙 기반을 지원하지 않음
- 비용 : 처리에 필요하다고 생각되는 시간 또는 자원 사용량

# 비용 계산
- SQL문의 정보
- 테이블이나 인덱스의 통계정보
- 파라미터 정보
- 시스템 통계 정보 (오라클 10g부터는 기본)

# 공유 풀의 동작과 구조
- 실행계획을 재이용하고 분석 작업을 줄이기 위한 존재!!
- 공유 풀도 프로세스 간에 공유하지 않으면 안 되기 때문에 버퍼 캐시와 마찬가지로 공유 메모리에 있음
- 오라클은 해시 알고리즘을 사용해서 SQL문마다  ID를 생성함
- 해시 함수에서 대문자와 소문자는 다른 문자이므로 쿼리의 대문자와 소문자가 다르면 받는 해시 값도 달라짐***
- 바인드 변수는 같은 것으로 인식
- 분석(파스) - 하드파스 / 소프트 파스
- 하드파스 : 공유풀에 샐행 계획이 없으므로 실행 계획을 생성하는 경우를 의미
- 소프트 파스는 해시 값을 요청한 결과 공유 풀에 캐시되어 있는 실행 계획을 찾았기 때문에 재이용하는 경우를 의미함

# 수치로 알아보는 분석과 공유 풀의 정보


Chapter 5. 오라클의 기동과 정지

윈도우즈용 오라클과 유닉스용 오라클의 내부구조는 대부분 동일, 윈도우즈용 오라클은 멀티스레드 구조, 유닉스용 오라클은 멀티프로셋 구조

# 오라클의 기동/정지의 개요
OPEN - 데이터 처리를 할 수 있는 상태, SQL을 처리할 수 있는 상태
MOUNT - 데이터 파일 등에 접근할 수 있는 상태 (컨트롤 파일을 읽은 상태)
NOMOUNT - 백그라운드 프로세스와 공유 메모리가 존재하는 상태
SHUTDOWN - 정지 상태


# 업무의 시작에 해당하는 오라클의 기동
- 컨트롤 파일 : 데이터베이스의 구성 정보가 적혀 있는 파일로서 데이터베이스의 파일 경로 등을 알 수 있음
- 데이터 파일이나 리두 로그 파일을 열어서 오라클이 내부적으로 사용하는 정보와 비굑하여 문제가 있는지 확인함
- 데이터 파일은 이름대로 데이터가 보관된 파일을 의미함
- 리두 로그 파일은 데이터의 변경 이력을 보관하는 파일을 의미

# 인스턴스, 데이터베이스, 그리고 주요 파일의 구성
- 백그라운드 프로세스 + 공유 메모리 = 인스턴스
- 객체지향 언어의 경험에서 엔티티를 떠올리는 분들도 계실 것으로 생각하지만, 오라클에서는 백그라운드 프로세스 + 공유 메모리입니다.
- NOMOUNT 상태가 인스턴스가 기동한 상태
- 인스턴스는 데이터베이스를 관리하는 것이며, 데이터베이스가 아님
- 인스턴스와 데이터베이스는 일대일로 대응
- RAC (Real Application Clusters)

# 기동처리의 흐름과 내부 동작
1. 기동정지 상태에서 NOMOUNT로 전환
- startup nomount로 인해 정지 상태에서 NOMOUNT 상태로 변경
2.  NOMOUNT로 부터 MOUNT로 전환
- alter database mount라고 입력하면 NOMOUNT 상태에서 MOUNT 상태가 됨
- 초기화 파라미터에 기술된 컨트롤 파일의 경로를 사용해 컨트롤 파일을 열어 내용을 읽어옴, 이로서 오라클은 리두 로그 파일이나 데이터 파일의 위치를 파악할 수 있음.
- alter database mount;
	  Database altered.
3. MOUNT에서 OPEN으로 전환
- alter database open  입력
- 명령어 내부에서는 데이터 파일을 열어서 간단한 점검을 하거나 백그라운드 프로세스를 기동

# 파일의 사용 순서를 확인
초기화 파라미터 파일 -> 컨트롤 파일 -> 데이터 파일

초기화 파라미터 파일이 올바른 위치에 있지 않을 때,
컨트롤 파일이 없을 때,
데이터 파일을 삭제했을 때,
오래된 데이터 파일고 바꾸어 기동해 보면
-> 데이터베이스를 오픈하지 않음 (오픈실패)


Chapter 6. 커넥션과 서버 프로세스의 생성

# 오라클의 커넥션 동작
1. 소켓의 동작 그림
- TCP/IP 의 소켓을 사용
- 송수신은 실제로 네트워크의 드라이버와 OS 의 라이브러리가 수행하고 있음
- 소켓은 주소와 포트번호의 조합으로 식별가능

2. 오라클에서 소켓의 동작
- 수신을 기다리는 프로세스를 리스너라고 부름
- 리스너로 커넥션을 하는 프로세스는 업무 애플리케이션의 프로세스

3. 커넥션 처리
- 1) 리스너를 기동
- 2) 애플리케이션의 커넥션
- 3) 서버 프로세스의 생성

# 커넥션 동작의 확인

# 정지나 리스너의 상태 확인
- 애플리케이션에서 접속을 종료하는 처리를 하면 서버 프로세스도 종료
- 리스너는 lsnrctl 명령어로 정지할 수 있음
